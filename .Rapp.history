import ggplot2
require ggplot2
import "ggplot1"
import "ggplot2"
clear
require ggplot2
library('ggplot2')#
library('grid')#
library('RColorBrewer')#
#
#resize window to 650 px width#
quartz.options(width = 8.33333333333333, height = 5.55555555555556, dpi = 72)#
#
# For windows, uncomment below line (and comment out above line)#
#windows.options(width = 8.33333333333333, height = 5.55555555555556)#
#
#################### redefine default ggplot theme ####################
theme_new <- theme_set(theme_bw())#
theme_new <- theme_update(#
	line = element_line(colour = "#000000", size = 0.5, linetype = 2L,     lineend = "butt"), rect = element_rect(fill = "#E3E3FF", colour = "#000000", size = 0.5,     linetype = 1L), text = element_text(family = "Courier New", face = "plain", colour = "#000000",     size = 12, hjust = 0, vjust = 0, angle = 0, lineheight = 0.9), title = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), axis.text = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), strip.text = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), axis.line = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), axis.text.x = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), axis.text.y = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), axis.ticks = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), axis.title.x = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), axis.title.y = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), axis.ticks.length = unit(4, "points"), axis.ticks.margin = unit(0.3, "points"), legend.background = element_rect(fill = NULL, colour = NULL, size = NULL, linetype = NULL), legend.margin = unit(8, "points"), legend.key = element_rect(fill = NULL, colour = NULL, size = NULL, linetype = NULL), legend.key.size = unit(10, "points"), legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), legend.text.align = NULL, legend.title = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), legend.title.align = NULL, legend.position = unit(NA, NA), legend.direction = NULL, legend.justification = NULL, legend.box = NULL, panel.background = element_rect(fill = NULL, colour = NULL, size = NULL, linetype = NULL), panel.border = element_rect(fill = NA, colour = NULL, size = NULL, linetype = NULL), panel.grid.major = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.grid.minor = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.margin = unit(2, "points"), panel.margin.x = NULL, panel.margin.y = NULL, strip.background = element_rect(fill = NULL, colour = NULL, size = NULL, linetype = NULL), strip.text.x = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), strip.text.y = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), plot.background = element_rect(fill = NULL, colour = NULL, size = NULL, linetype = NULL), plot.title = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), plot.margin = unit(c(10, 10, 10, 10), "points"), axis.line.x = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), axis.line.y = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), axis.title = element_text(family = NULL, face = NULL, colour = NULL, size = NULL,     hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), axis.ticks.x = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), axis.ticks.y = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.grid = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.grid.major.x = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.grid.major.y = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.grid.minor.x = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.grid.minor.y = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL)#
    )#
#
##############################
#
#Redefine default discrete colors, up to 9 colors.#
scale_colour_discrete <- function(...) scale_colour_custom(..., palette="Set1")#
scale_fill_discrete <- function(...) scale_fill_custom(... , palette="Set1")#
#
#################### Functions to Define custom colours ######################
divlist<-c("BrBG","PiYG","PRGn","PuOr","RdBu","RdGy","RdYlBu","RdYlGn","Spectral")#
quallist<-c("Accent","Dark2","Paired","Pastel1","Pastel2","Set1","Set2","Set3")#
seqlist<-c("Blues","BuGn","BuPu","GnBu","Greens","Greys","Oranges","OrRd",#
"PuBu","PuBuGn","PuRd","Purples","RdPu","Reds","YlGn","YlGnBu","YlOrBr","YlOrRd")#
#
divnum <- rep(11, length(divlist))#
qualnum <- c( 8, 8, 12, 9, 8, 9, 8, 12)#
seqnum <- rep(9, length(seqlist))#
#
namelist<-c(divlist,quallist,seqlist)#
maxcolours <- c(divnum,qualnum,seqnum)#
catlist<-rep(c("div","qual","seq"),c(length(divlist),length(quallist),length(seqlist)))#
#
custom.pal.info<-data.frame(maxcolours=maxcolours,category=catlist,row.names=namelist)#
#
custom.pal<-function(n,name){#
 if(!(name %in% namelist)){#
 stop(paste(name,"is not a valid palette name for custom.pal\n"))#
 }#
 if(n<3){#
 warning("minimal value for n is 3, returning requested palette with 3 different levels\n")#
 return(custom.pal(3,name))#
 }#
 if(n>maxcolours[which(name==namelist)]){#
 warning(paste("n too large, allowed maximum for palette",name,"is",maxcolours[which(name==namelist)]),#
"\nReturning the palette you asked for with that many colours\n")#
 return(custom.pal(maxcolours[which(name==namelist)],name))#
 }#
#
c1 <- col2rgb("#43F8B0")#
c2 <- col2rgb("#411CBA")#
c3 <- col2rgb("#FF3BD8")#
c4 <- col2rgb("#67D379")#
c5 <- col2rgb("#C1AA38")#
c6 <- col2rgb("#FB446F")#
c7 <- col2rgb("#74AA50")#
c8 <- col2rgb("#E33636")#
c9 <- col2rgb("#F2DBFF")#
#
 switch(name,#
#
  Set1 =  switch(n,#
#
rgb(c(c1[1]),#
  c(c1[2]),#
  c(c1[3]),maxColorValue=255),#
rgb(c(c1[1],c2[1]),#
  c(c1[2],c2[2]),#
  c(c1[3],c2[3]),maxColorValue=255),#
rgb(c(c1[1],c2[1],c3[1]),#
  c(c1[2],c2[2],c3[2]),#
  c(c1[3],c2[3],c3[3]),maxColorValue=255),#
rgb(c(c1[1],c2[1],c3[1],c4[1]),#
  c(c1[2],c2[2],c3[2],c4[2]),#
  c(c1[3],c2[3],c3[3],c4[3]),maxColorValue=255),#
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1]),#
  c(c1[2],c2[2],c3[2],c4[2],c5[2]),#
  c(c1[3],c2[3],c3[3],c4[3],c5[3]),maxColorValue=255),#
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1],c6[1]),#
  c(c1[2],c2[2],c3[2],c4[2],c5[2],c6[2]),#
  c(c1[3],c2[3],c3[3],c4[3],c5[3],c6[3]),maxColorValue=255),#
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1],c6[1],c7[1]),#
  c(c1[2],c2[2],c3[2],c4[2],c5[2],c6[2],c7[2]),#
  c(c1[3],c2[3],c3[3],c4[3],c5[3],c6[3],c7[3]),maxColorValue=255),#
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1],c6[1],c7[1],c8[1]),#
  c(c1[2],c2[2],c3[2],c4[2],c5[2],c6[2],c7[2],c8[2]),#
  c(c1[3],c2[3],c3[3],c4[3],c5[3],c6[3],c7[3],c8[3]),maxColorValue=255),#
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1],c6[1],c7[1],c8[1],c9[1]),#
  c(c1[2],c2[2],c3[2],c4[2],c5[2],c6[2],c7[2],c8[2],c9[2]),#
  c(c1[3],c2[3],c3[3],c4[3],c5[3],c6[3],c7[3],c8[3],c9[3]),maxColorValue=255),#
),#
  Set2 =  switch(n,#
rgb(c(154),#
  c(62),#
  c(37),maxColorValue=255),#
rgb(c(154,21),#
  c(62,107),#
  c(37,144),maxColorValue=255),#
rgb(c(154,21,112),#
  c(62,107,130),#
  c(37,144,89),maxColorValue=255)#
)#
)#
}#
pal_name <- function(palette, type) {#
if (is.character(palette)) {#
  if (!palette %in% RColorBrewer:::namelist) {#
    warning("Unknown palette ", palette)#
    palette <- "Set1"#
  }#
  return(palette)#
}#
#
switch(type,#
  div = divlist,#
  qual = quallist,#
  seq = seqlist,#
  stop("Unknown palette type. Should be 'div', 'qual' or 'seq'",#
    call. = FALSE)#
)[palette]#
}#
#
custom_pal <- function(type = "seq", palette = 1) {#
pal <- pal_name(palette, type)#
#
function(n) {#
  if (n < 3)#
    suppressWarnings(custom.pal(n, pal))[seq_len(n)]#
  else#
    custom.pal(n, pal)[seq_len(n)]#
}#
}#
#
scale_colour_custom <- function(..., type = "seq", palette = 1) {#
discrete_scale("colour", "custom", custom_pal(type, palette), ...)#
}#
#
#' @export#
#' @rdname scale_custom#
scale_fill_custom <- function(..., type = "seq", palette = 1) {#
discrete_scale("fill", "custom", custom_pal(type, palette), ...)#
}
ggplot(diamonds, aes(clarity, fill=cut)) + geom_bar() +ggtitle("Title") + coord_cartesian(ylim = c(0, 15000))
valid.units()
valid.units
units
units()
units
unit(4, "points")
unit(NA,NA)
library('shiny')#
library('ggplot2')#
library('reshape2')#
library('RColorBrewer')#
library('plyr')#
library('stringr')
runApp('ggShinyApp')
runApp('ggShinyApp')
theme_black
theme_black()
theme_get()
theme_get()$legend.position
deparse(theme_get())
deparse(theme_get()$legend.position)
deparse(theme_get()$line)
theme_string <- mlply(cbind(names(theme_get()), theme_get()),parse_theme)
parse_theme <- function(name,element){#
  in_str <- paste(deparse(element),collapse="")#
  #str_match returns df w/ 1st column entire string, then match groups in subsequent columns#
  #so match groups are 2-indexed (vs 1-indexed or 0-indexed)#
  type <- str_match(in_str,"(\")(element_[a-z]+)(\")")[,3]#
  if(in_str == "NULL"){#
    out_str <- "NULL"#
  }#
  else if(grepl("element_blank",in_str)){#
    out_str <- "element_blank()"#
  }#
  else if(grepl(".Names",in_str)){#
    obj <- str_match(in_str,"(^structure\\(list\\()(.*)(, \\.Names)")[,3]#
    out_str <- paste(type,"(",obj,sep="")#
  }#
  else{#
    match <- str_match(in_str,"(^structure\\()(.*)(, unit = )(\".*\")(,)")#
    size <- match[,3]#
    unit <- match[,5]#
    out_str <- paste("unit(",size,", ",unit,")",sep="")#
  }#
  val <- paste(name,"=",out_str)#
  val#
}
theme_string <- mlply(cbind(names(theme_get()), theme_get()),parse_theme)
theme_string
cbind(names(theme_get()), theme_get())
theme_string <- mlply(cbind(names(theme_get()), theme_get()),deparse)
theme_string <- mlply(cbind(names(theme_get()), theme_get()),deparse())
theme_string <- mlply(cbind(names(theme_get()), theme_get()),deparse)
llply(theme_get(),deparse)
library('shiny')#
library('ggplot2')#
library('reshape2')#
library('RColorBrewer')#
library('plyr')#
library('stringr')
runApp('ggShinyApp')
